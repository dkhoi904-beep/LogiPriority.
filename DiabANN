{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "# ============================================\n",
        "# Prediction of Diabetes — ANN + Gradio (Creative UI)\n",
        "# ============================================\n",
        "\n",
        "# !pip -q install gradio==4.*  # mở nếu Colab thiếu\n",
        "\n",
        "import os, random, joblib, io, base64\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import gradio as gr\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import accuracy_score, roc_auc_score\n",
        "import tensorflow as tf\n",
        "from tensorflow import keras\n",
        "from tensorflow.keras import layers\n",
        "\n",
        "# --------------- Reproducibility ---------------\n",
        "SEED = 42\n",
        "np.random.seed(SEED); tf.random.set_seed(SEED); random.seed(SEED)\n",
        "os.environ[\"PYTHONHASHSEED\"] = str(SEED)\n",
        "\n",
        "# --------------- Config ---------------\n",
        "FEATURES = [\"Pregnancies\",\"Glucose\",\"SkinThickness\",\"Insulin\",\"BMI\",\n",
        "            \"DiabetesPedigreeFunction\",\"Age\"]\n",
        "IMPUTE_ZERO = [\"Glucose\",\"SkinThickness\",\"Insulin\",\"BMI\"]\n",
        "TARGET = \"Outcome\"\n",
        "\n",
        "CONSULTING = \"\"\"\n",
        "**Consulting (tham khảo, không thay thế tư vấn y khoa):**\n",
        "- Cân đối **carb–protein–fat**; ưu tiên rau, trái cây, ngũ cốc nguyên hạt; hạn chế đồ uống có đường.\n",
        "- **Vận động** thường xuyên; duy trì **cân nặng hợp lý**.\n",
        "- Theo dõi đường huyết theo chỉ định; nếu có dấu hiệu bất thường, **liên hệ bác sĩ/chuyên gia dinh dưỡng**.\n",
        "\"\"\"\n",
        "\n",
        "# --------------- Data loading & cleaning ---------------\n",
        "def load_initial_df():\n",
        "    \"\"\"Ưu tiên dùng CSV của bạn tại /content/diabetes.csv; nếu không, dùng Pima mặc định.\"\"\"\n",
        "    local = \"/content/diabetes.csv\"\n",
        "    if os.path.exists(local):\n",
        "        df = pd.read_csv(local)\n",
        "    else:\n",
        "        url = \"https://raw.githubusercontent.com/plotly/datasets/master/diabetes.csv\"\n",
        "        df = pd.read_csv(url)\n",
        "    df.columns = [c.strip() for c in df.columns]\n",
        "    for c in IMPUTE_ZERO:\n",
        "        if c in df.columns:\n",
        "            df[c] = df[c].replace(0, np.nan).fillna(df[c].median())\n",
        "    return df\n",
        "\n",
        "def check_and_split(df, need_target=True):\n",
        "    miss = [c for c in FEATURES if c not in df.columns]\n",
        "    if miss:\n",
        "        raise ValueError(f\"Thiếu cột: {miss}. Yêu cầu đúng tên cột {FEATURES}.\")\n",
        "    X = df[FEATURES].astype(np.float32).values\n",
        "    y = None\n",
        "    if need_target:\n",
        "        if TARGET not in df.columns:\n",
        "            raise ValueError(\"CSV huấn luyện cần cột 'Outcome' (0/1).\")\n",
        "        y = df[TARGET].astype(np.float32).values\n",
        "    return X, y\n",
        "\n",
        "# --------------- Build & train ANN ---------------\n",
        "def build_ann(input_dim: int):\n",
        "    model = keras.Sequential([\n",
        "        layers.Dense(32, activation='relu', input_shape=(input_dim,)),\n",
        "        layers.Dropout(0.15),\n",
        "        layers.Dense(16, activation='relu'),\n",
        "        layers.Dense(1, activation='sigmoid')\n",
        "    ])\n",
        "    model.compile(optimizer='adam',\n",
        "                  loss='binary_crossentropy',\n",
        "                  metrics=[keras.metrics.AUC(name='auc'),\n",
        "                           keras.metrics.BinaryAccuracy(name='acc')])\n",
        "    return model\n",
        "\n",
        "scaler = StandardScaler()\n",
        "model  = build_ann(len(FEATURES))\n",
        "\n",
        "_base_df = load_initial_df()\n",
        "X_all, y_all = check_and_split(_base_df, need_target=True)\n",
        "\n",
        "X_tr, X_te, y_tr, y_te = train_test_split(\n",
        "    X_all, y_all, test_size=0.2, random_state=SEED, stratify=y_all\n",
        ")\n",
        "X_tr = scaler.fit_transform(X_tr)\n",
        "X_te = scaler.transform(X_te)\n",
        "\n",
        "es = keras.callbacks.EarlyStopping(monitor='val_auc', mode='max',\n",
        "                                   patience=20, restore_best_weights=True, verbose=0)\n",
        "model.fit(X_tr, y_tr, epochs=250, batch_size=32,\n",
        "          validation_split=0.2, callbacks=[es], verbose=0)\n",
        "\n",
        "y_prob = model.predict(X_te, verbose=0).ravel()\n",
        "ACC = accuracy_score(y_te, (y_prob >= 0.5).astype(int))\n",
        "AUC = roc_auc_score(y_te, y_prob)\n",
        "\n",
        "# --------------- Helpers: nice gauge & badge ---------------\n",
        "def risk_gauge_html(p: float) -> str:\n",
        "    \"\"\"Circular gauge with conic-gradient. p in [0,1].\"\"\"\n",
        "    pct = max(0.0, min(1.0, float(p)))\n",
        "    deg = int(pct * 360)\n",
        "    color = \"#22c55e\" if pct < 0.33 else (\"#f59e0b\" if pct < 0.66 else \"#ef4444\")\n",
        "    return f\"\"\"\n",
        "    <div class=\"gauge-wrap\">\n",
        "      <div class=\"gauge\" style=\"background:\n",
        "           conic-gradient({color} {deg}deg, #e5e7eb {deg}deg 360deg);\">\n",
        "        <div class=\"gauge-inner\"><span>{pct*100:.1f}%</span></div>\n",
        "      </div>\n",
        "      <style>\n",
        "       .gauge-wrap {{ display:flex; justify-content:center; }}\n",
        "       .gauge {{ width:160px; height:160px; border-radius:50%;\n",
        "                 display:flex; align-items:center; justify-content:center; }}\n",
        "       .gauge-inner {{ width:120px; height:120px; border-radius:50%;\n",
        "                       background:#fff; display:flex; align-items:center; justify-content:center;\n",
        "                       font-size:1.6rem; font-weight:700; color:#111827; }}\n",
        "      </style>\n",
        "    </div>\n",
        "    \"\"\"\n",
        "\n",
        "def verdict_badge(prob: float, thresh: float) -> str:\n",
        "    at_risk = prob >= thresh\n",
        "    text  = \"At risk for diabetes\" if at_risk else \"Not at risk for diabetes\"\n",
        "    bg    = \"#fee2e2\" if at_risk else \"#dcfce7\"\n",
        "    fg    = \"#b91c1c\" if at_risk else \"#065f46\"\n",
        "    return f\"\"\"\n",
        "    <div style=\"display:inline-block;padding:.4rem .75rem;border-radius:999px;\n",
        "                background:{bg};color:{fg};font-weight:700;\">{text}</div>\n",
        "    \"\"\"\n",
        "\n",
        "# --------------- Inference & actions ---------------\n",
        "def predict_one(preg, glu, skin, ins, bmi, dpf, age, thresh):\n",
        "    row = np.array([[preg, glu, skin, ins, bmi, dpf, age]], dtype=np.float32)\n",
        "    row = scaler.transform(row)\n",
        "    p = float(model.predict(row, verbose=0)[0,0])\n",
        "    gauge = risk_gauge_html(p)\n",
        "    badge = verdict_badge(p, thresh)\n",
        "    advice = CONSULTING if p >= thresh else \"Current risk estimated low. \" + CONSULTING\n",
        "    return gauge, {\"Risk probability\": f\"{p:.3f}\"}, badge, advice\n",
        "\n",
        "def retrain_from_csv(file, append_default):\n",
        "    global model, scaler, ACC, AUC, _base_df\n",
        "    if file is None:\n",
        "        return \"Chưa chọn file CSV.\", f\"Accuracy ~ {ACC:.3f} | AUC ~ {AUC:.3f}\"\n",
        "    df_u = pd.read_csv(file.name)\n",
        "    df_u.columns = [c.strip() for c in df_u.columns]\n",
        "    for c in IMPUTE_ZERO:\n",
        "        if c in df_u.columns:\n",
        "            df_u[c] = df_u[c].replace(0, np.nan).fillna(df_u[c].median())\n",
        "    df_all = pd.concat([_base_df, df_u], ignore_index=True) if append_default else df_u.copy()\n",
        "    X, y = check_and_split(df_all, need_target=True)\n",
        "\n",
        "    X_tr, X_te, y_tr, y_te = train_test_split(\n",
        "        X, y, test_size=0.2, random_state=SEED, stratify=y\n",
        "    )\n",
        "    scaler = StandardScaler()\n",
        "    X_tr = scaler.fit_transform(X_tr)\n",
        "    X_te = scaler.transform(X_te)\n",
        "\n",
        "    model = build_ann(len(FEATURES))\n",
        "    es = keras.callbacks.EarlyStopping(monitor='val_auc', mode='max',\n",
        "                                       patience=20, restore_best_weights=True, verbose=0)\n",
        "    model.fit(X_tr, y_tr, epochs=250, batch_size=32,\n",
        "              validation_split=0.2, callbacks=[es], verbose=0)\n",
        "    y_prob = model.predict(X_te, verbose=0).ravel()\n",
        "    ACC = accuracy_score(y_te, (y_prob >= 0.5).astype(int))\n",
        "    AUC = roc_auc_score(y_te, y_prob)\n",
        "    return \"Retrain hoàn tất.\", f\"Accuracy ~ {ACC:.3f} | AUC ~ {AUC:.3f}\"\n",
        "\n",
        "def batch_predict_csv(file, thresh):\n",
        "    if file is None:\n",
        "        return None, gr.update(visible=False), \"Chưa chọn file CSV.\"\n",
        "    df = pd.read_csv(file.name)\n",
        "    df.columns = [c.strip() for c in df.columns]\n",
        "    for c in IMPUTE_ZERO:\n",
        "        if c in df.columns:\n",
        "            df[c] = df[c].replace(0, np.nan).fillna(df[c].median())\n",
        "    X, _ = check_and_split(df, need_target=False)\n",
        "    Xn = scaler.transform(X)\n",
        "    p = model.predict(Xn, verbose=0).ravel()\n",
        "    out = df.copy()\n",
        "    out[\"risk_probability\"] = np.round(p, 3)\n",
        "    out[\"label\"] = np.where(out[\"risk_probability\"] >= thresh, \"At risk\", \"Not at risk\")\n",
        "    out_path = \"/content/diabetes_predictions.csv\"\n",
        "    out.to_csv(out_path, index=False)\n",
        "    return out_path, gr.update(visible=True, value=out.head(12)), \"Đã tạo file dự đoán.\"\n",
        "\n",
        "def export_artifacts():\n",
        "    keras.models.save_model(model, \"/content/diabetes_ann.h5\")\n",
        "    joblib.dump(scaler, \"/content/scaler.pkl\")\n",
        "    return \"/content/diabetes_ann.h5\", \"/content/scaler.pkl\", \"Đã lưu model & scaler.\"\n",
        "\n",
        "# --------------- Custom CSS for harmonious look ---------------\n",
        "CSS = \"\"\"\n",
        ":root { --brand: #6d28d9; --accent:#22c55e; --card:#ffffff; --muted:#f5f7fb; }\n",
        ".gradio-container { font-family: Inter, system-ui, -apple-system, Segoe UI, Roboto, sans-serif; }\n",
        ".header {\n",
        "  background: linear-gradient(135deg, #6d28d9, #22c55e);\n",
        "  color: white; padding: 22px 24px; border-radius: 18px; box-shadow: 0 10px 30px rgba(0,0,0,.15);\n",
        "}\n",
        ".card {\n",
        "  background: var(--card); border-radius: 16px; padding: 16px;\n",
        "  box-shadow: 0 8px 24px rgba(0,0,0,.08); border: 1px solid #eef1f5;\n",
        "}\n",
        ".metrics { display:flex; gap:12px; }\n",
        ".metric { flex:1; background: var(--muted); border-radius:14px; padding:12px 16px; }\n",
        ".metric h3 { margin:4px 0; font-size: 14px; color:#374151; }\n",
        ".metric .v { font-weight:800; font-size: 22px; color:#111827; }\n",
        "\"\"\"\n",
        "\n",
        "THEME = gr.themes.Soft(\n",
        "    primary_hue=\"violet\",\n",
        "    secondary_hue=\"green\",\n",
        ").set(body_background_fill=\"#fafbff\")\n",
        "\n",
        "# --------------- UI ---------------\n",
        "with gr.Blocks(title=\"Prediction of Diabetes (ANN)\", theme=THEME, css=CSS) as demo:\n",
        "    gr.HTML(f\"\"\"\n",
        "    <div class=\"header\">\n",
        "      <h1 style=\"margin:0;\">Prediction of Diabetes — ANN</h1>\n",
        "      <p style=\"opacity:.95;margin:.25rem 0 0;\">Creative UI · 7 features · Dense Neural Network (Keras)</p>\n",
        "      <div class=\"metrics\" style=\"margin-top:10px;\">\n",
        "        <div class=\"metric\"><h3>Accuracy (test)</h3><div class=\"v\">{ACC:.3f}</div></div>\n",
        "        <div class=\"metric\"><h3>AUC (test)</h3><div class=\"v\">{AUC:.3f}</div></div>\n",
        "        <div class=\"metric\"><h3>Model</h3><div class=\"v\">Dense(32→16→1)</div></div>\n",
        "      </div>\n",
        "    </div>\n",
        "    \"\"\")\n",
        "\n",
        "    with gr.Row():\n",
        "        with gr.Column(scale=1, min_width=380):\n",
        "            gr.Markdown(\"### Inputs\")\n",
        "            pregnancies = gr.Slider(0, 17, 3, step=1, label=\"Pregnancies\")\n",
        "            glucose     = gr.Slider(50, 200, 120, step=1, label=\"Glucose\")\n",
        "            skin        = gr.Slider(0, 100, 23, step=1, label=\"SkinThickness\")\n",
        "            insulin     = gr.Slider(0, 900, 100, step=1, label=\"Insulin\")\n",
        "            bmi         = gr.Slider(10.0, 70.0, 28.0, step=0.1, label=\"BMI\")\n",
        "            dpf         = gr.Slider(0.05, 2.5, 0.47, step=0.01, label=\"Diabetes Pedigree Function\")\n",
        "            age         = gr.Slider(18, 90, 35, step=1, label=\"Age\")\n",
        "            thresh      = gr.Slider(0.10, 0.90, 0.50, step=0.01, label=\"Decision threshold\")\n",
        "            btn_predict = gr.Button(\"🔮 Predict\", variant=\"primary\")\n",
        "        with gr.Column(scale=1, min_width=380):\n",
        "            with gr.Group(elem_classes=[\"card\"]):\n",
        "                gauge_html = gr.HTML(label=\"Risk Gauge\")\n",
        "                prob_label = gr.Label(label=\"Risk probability\")\n",
        "                verdict    = gr.HTML(label=\"Verdict\")\n",
        "            with gr.Accordion(\"Consulting\", open=False):\n",
        "                consult_md = gr.Markdown(CONSULTING)\n",
        "\n",
        "    btn_predict.click(\n",
        "        predict_one,\n",
        "        inputs=[pregnancies, glucose, skin, insulin, bmi, dpf, age, thresh],\n",
        "        outputs=[gauge_html, prob_label, verdict, consult_md]\n",
        "    )\n",
        "\n",
        "    with gr.Tab(\"📦 Batch Predict CSV\"):\n",
        "        with gr.Row():\n",
        "            csv_pred = gr.File(label=\"CSV với 7 FEATURES (không cần Outcome)\", file_types=[\".csv\"])\n",
        "            thresh2  = gr.Slider(0.10, 0.90, 0.50, step=0.01, label=\"Decision threshold\")\n",
        "        run_pred = gr.Button(\"Run batch prediction\")\n",
        "        file_out = gr.File(label=\"Tải CSV kết quả\", visible=False)\n",
        "        head_df  = gr.Dataframe(label=\"Xem nhanh 12 dòng đầu\", visible=False)\n",
        "        msg2     = gr.Markdown()\n",
        "        run_pred.click(batch_predict_csv, inputs=[csv_pred, thresh2],\n",
        "                       outputs=[file_out, head_df, msg2])\n",
        "\n",
        "    with gr.Tab(\"🧪 Data & Retrain ANN\"):\n",
        "        gr.Markdown(\"Upload CSV để huấn luyện lại (7 FEATURES + `Outcome`). Có thể **Append** vào dataset mặc định.\")\n",
        "        csv_train = gr.File(label=\"Training CSV\", file_types=[\".csv\"])\n",
        "        append_ck = gr.Checkbox(value=True, label=\"Append với dataset mặc định\")\n",
        "        run_train = gr.Button(\"Train / Retrain\", variant=\"primary\")\n",
        "        msg3      = gr.Markdown()\n",
        "        metrics   = gr.Markdown(f\"Accuracy ~ {ACC:.3f} | AUC ~ {AUC:.3f}\")\n",
        "        run_train.click(retrain_from_csv, inputs=[csv_train, append_ck], outputs=[msg3, metrics])\n",
        "\n",
        "    with gr.Tab(\"💾 Export\"):\n",
        "        gr.Markdown(\"Lưu model (.h5) và scaler (.pkl) để dùng lại.\")\n",
        "        save_btn = gr.Button(\"Export model & scaler\")\n",
        "        f_model  = gr.File(label=\"diabetes_ann.h5\", interactive=False)\n",
        "        f_scaler = gr.File(label=\"scaler.pkl\", interactive=False)\n",
        "        save_msg = gr.Markdown()\n",
        "        save_btn.click(export_artifacts, outputs=[f_model, f_scaler, save_msg])\n",
        "\n",
        "    gr.Markdown(\n",
        "        \"---\\n*Mục đích học thuật; không phải công cụ chẩn đoán y khoa. \"\n",
        "        \"Thiết kế: header gradient, metric cards, risk gauge, badge màu sắc để trực quan & hài hoà.*\"\n",
        "    )\n",
        "\n",
        "demo.launch()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 677
        },
        "id": "wHKmzraizpwP",
        "outputId": "4917f943-b6ed-4a54-fb97-54125e9401f8"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/keras/src/layers/core/dense.py:93: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "It looks like you are running Gradio on a hosted Jupyter notebook, which requires `share=True`. Automatically setting `share=True` (you can turn this off by setting `share=False` in `launch()` explicitly).\n",
            "\n",
            "Colab notebook detected. To show errors in colab notebook, set debug=True in launch()\n",
            "* Running on public URL: https://069caedad5107efe89.gradio.live\n",
            "\n",
            "This share link expires in 1 week. For free permanent hosting and GPU upgrades, run `gradio deploy` from the terminal in the working directory to deploy to Hugging Face Spaces (https://huggingface.co/spaces)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<div><iframe src=\"https://069caedad5107efe89.gradio.live\" width=\"100%\" height=\"500\" allow=\"autoplay; camera; microphone; clipboard-read; clipboard-write;\" frameborder=\"0\" allowfullscreen></iframe></div>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": []
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    }
  ]
}